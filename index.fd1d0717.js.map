{"mappings":"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","sources":["src/libs/select.js"],"sourcesContent":["!(function (name, definition) {\r\n  if (typeof define === 'function') {\r\n      define(name, definition);\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n      module.exports = definition();\r\n  } else {\r\n      this[name] = definition();\r\n  }\r\n}('Select', function () {\r\n  'use strict';\r\n\r\n  class Component {\r\n\r\n      constructor(props) {\r\n          this.props = props || {};\r\n          this.state = {};\r\n          this.refs = {};\r\n          this.$disposables = {\r\n              mounted: [],\r\n              updated: []\r\n          };\r\n      }\r\n\r\n      $defer(stage, dispose) {\r\n          this.$disposables[stage].push(dispose);\r\n      }\r\n\r\n      $dispose(stage) {\r\n          this.$disposables[stage].reverse().forEach(dispose => dispose());\r\n          this.$disposables[stage].length = 0;\r\n      }\r\n\r\n      componentMount(ctx) {\r\n          this.$el && this.componentUnmount();\r\n          this.componentWillMount();\r\n          this.$el = (ctx && ctx.el) || document.createElement('div');\r\n          this.$defer('mounted', () => {\r\n              this.$el.innerHTML = '';\r\n          this.$el = null;\r\n      });\r\n          this.forceUpdate();\r\n          this.componentDidMount();\r\n          return this;\r\n      }\r\n\r\n      componentWillMount() {}\r\n\r\n      componentDidMount() {}\r\n\r\n      componentUnmount() {\r\n          this.componentWillUnmount();\r\n          this.$dispose('mounted');\r\n          this.componentDidUnmount();\r\n          return this;\r\n      }\r\n\r\n      componentWillUnmount() {}\r\n\r\n      componentDidUnmount() {}\r\n\r\n      setState(updater, callback) {\r\n          let prevState = this.state;\r\n          let nextState = typeof updater == 'function' ? updater(prevState, this.props) : updater;\r\n          this.state = Object.assign(prevState, nextState);\r\n          if (this.shouldComponentUpdate(prevState, nextState)) {\r\n              this.forceUpdate();\r\n          }\r\n          callback && callback.call(this);\r\n          return this;\r\n      }\r\n\r\n      forceUpdate() {\r\n          this.componentUpdate(this.props, this.state);\r\n          return this;\r\n      }\r\n\r\n      shouldComponentUpdate(prevState, nextState) {\r\n          return prevState !== nextState;\r\n      }\r\n\r\n      componentUpdate(props, state) {\r\n          if (this.$el) {\r\n              this.componentWillUpdate(props, state);\r\n              this.$dispose('updated');\r\n              this.$el.innerHTML = this.render(props, state);\r\n              this.refs = Array.from(this.$el.querySelectorAll('[ref]')).reduce(function (refs, node) {\r\n                  return (refs[node.getAttribute('ref')] = node), refs;\r\n              }, {});\r\n              this.componentDidUpdate(props, state);\r\n          }\r\n      }\r\n\r\n      componentWillUpdate(props, state) {}\r\n\r\n      render(props, state) {\r\n          return '';\r\n      }\r\n\r\n      componentDidUpdate(props, state) {}\r\n  }\r\n\r\n  class Select extends Component {\r\n      constructor(props) {\r\n          super(props);\r\n          this.state = {\r\n              placeholder: this.props.placeholder || '',\r\n              expanded: false\r\n          };\r\n          this.onDocumentClick = this.onDocumentClick.bind(this);\r\n          this.onComponentClick = this.onComponentClick.bind(this);\r\n          this.onToolboxClick = this.onToolboxClick.bind(this);\r\n          this.search = new Search(Object.assign({}, this.props, {\r\n              onSelected: selected => {\r\n                  this.props.onSelected && this.props.onSelected(selected);\r\n                  this.setState(prevState => ({\r\n                      placeholder: selected.text || selected.value,\r\n                      selected: selected,\r\n                      expanded: false\r\n                  }));\r\n              }\r\n          }));\r\n      }\r\n\r\n      onDocumentClick(event) {\r\n          this.setState(prevState => ({\r\n              expanded: false\r\n          }));\r\n      }\r\n\r\n      onComponentClick(event) {\r\n          event.stopPropagation();\r\n      }\r\n\r\n      onToolboxClick(event) {\r\n          this.setState(prevState => ({\r\n              expanded: !prevState.expanded\r\n          }), () => {\r\n              if (this.state.expanded) {\r\n                  this.search.refs.query.focus();\r\n              }\r\n          });\r\n      }\r\n\r\n      render(props, state) {\r\n          return `<div class=\"select__box\">\r\n                  <div ref=\"toolbox\" class=\"select__toolbox\">\r\n                      <i class=\"select__arrow\" aria-hidden=\"true\"></i>\r\n                      <div class=\"select__label\">${state.placeholder}</div>\r\n                  </div>\r\n                  <div ref=\"dropdown\" class=\"select__dropdown ${ state.expanded ? \"select__dropdown--show\" : \"\" }\"></div>\r\n              </div>`;\r\n      }\r\n\r\n      componentDidMount() {\r\n          document.body.addEventListener('click', this.onDocumentClick);\r\n          this.$defer('mounted', () => document.body.removeEventListener('click', this.onDocumentClick));\r\n          this.$el.addEventListener('click', this.onComponentClick);\r\n          this.$defer('mounted', () => this.$el.removeEventListener('click', this.onComponentClick));\r\n      }\r\n\r\n      componentDidUnmount() {\r\n          this.search.componentUnmount();\r\n      }\r\n\r\n      componentDidUpdate() {\r\n          const $toolbox = this.refs.toolbox;\r\n          $toolbox.addEventListener('click', this.onToolboxClick);\r\n          this.$defer('updated', () => $toolbox.removeEventListener('click', this.onToolboxClick));\r\n          this.search.componentMount({\r\n              el: this.refs.dropdown\r\n          });\r\n      }\r\n  }\r\n\r\n  class Search extends Component {\r\n      constructor(props) {\r\n          super(props);\r\n          this.state = {\r\n              query: \"\",\r\n              dataset: this.props.dataset || [],\r\n              selected: this.props.selected\r\n          };\r\n          this.onQueryChanged = this.onQueryChanged.bind(this);\r\n          this.onItemClicked = this.onItemClicked.bind(this);\r\n      }\r\n\r\n      onQueryChanged(event) {\r\n          const query = event.target.value;\r\n          const match = new RegExp(query, 'gi');\r\n          const dataset = (this.props.dataset || []).filter(item => match.test(item.text || item.value || ''));\r\n          this.setState(prevState => ({\r\n              query: query,\r\n              dataset: dataset\r\n          }));\r\n      }\r\n\r\n      onItemClicked(event) {\r\n          const index = event.target.closest('li').dataset.index;\r\n          const selected = this.state.dataset[index];\r\n          this.props.onSelected && this.props.onSelected(selected);\r\n          this.setState(prevState => ({\r\n              selected: selected\r\n          }));\r\n      }\r\n\r\n      render(props, state) {\r\n          if (state.dataset.length === 0) {\r\n              return `<input ref=\"query\" type=\"text\" value=\"${state.query}\" class=\"select__query\">\r\n                  <span class=\"select__query_noresult\">No results found</span>`;\r\n          }\r\n          return `<input ref=\"query\" type=\"text\" value=\"${state.query}\" class=\"select__query\">\r\n                  <ul ref=\"list\" class=\"select__list\">\r\n                      ${ state.dataset.map(function(item, index){\r\n                              return `\r\n                                  <li class=\"select__item ${item === state.selected ? \"select__item--selected\" : \"\"}\" data-index=\"${index}\" data-value=\"${item.value || item.text}\">\r\n                                      <i class=\"select__item_icon fa ${item.icon || ''}\" aria-hidden=\"true\"></i>\r\n                                      <span class=\"select__item_text\">${item.text || item.value}</span>\r\n                                  </li>`;\r\n                  }).join('') }\r\n                  </ul>`;\r\n      }\r\n\r\n      componentDidUpdate() {\r\n          const $query = this.refs.query;\r\n          $query.addEventListener('change', this.onQueryChanged);\r\n          this.$defer('updated', () => $query.removeEventListener('change', this.onQueryChanged));\r\n          const $list = this.refs.list;\r\n          $list.addEventListener('click', this.onItemClicked);\r\n          this.$defer('updated', () => $list.removeEventListener('click', this.onItemClicked));\r\n      }\r\n  }\r\n\r\n  return Select;\r\n}));\r\n\r\nconst source = [{\r\n      icon: 'fa-font',\r\n      value: 'Abril Fatface'\r\n    },\r\n    {\r\n      icon: 'fa-font',\r\n      value: 'Allura'\r\n    },\r\n    {\r\n      icon: 'fa-font',\r\n      value: 'Amatic SC'\r\n    }];\r\n\r\nlet select = Array.from(document.querySelectorAll('[ref=\"select\"]')).map(el => {\r\n    return new Select({\r\n      placeholder: 'Select Font',\r\n      dataset: source,\r\n      onSelected: item => console.log(item)\r\n    }).componentMount({\r\n      el: el\r\n    });\r\n  });\r\n"],"names":["name","definition","define","module","exports","this","Component","props","state","refs","$disposables","mounted","updated","$defer","stage","dispose1","push","$dispose","stage1","reverse","forEach","dispose","length","componentMount","ctx","$el","componentUnmount","componentWillMount","el","document","createElement","innerHTML","forceUpdate","componentDidMount","componentWillUnmount","componentDidUnmount","setState","updater","callback","prevState","nextState","Object","assign","shouldComponentUpdate","call","componentUpdate","prevState1","props1","componentWillUpdate","render","Array","from","querySelectorAll","reduce","node","getAttribute","componentDidUpdate","props2","state1","props3","state2","props4","state3","props7","super","query","dataset","selected","onQueryChanged","bind","event3","target","value","match","RegExp","event4","index","onSelected","props8","state5","map","item","text","join","$query","addEventListener","removeEventListener","$list","list","onItemClicked","props5","placeholder","expanded","onDocumentClick","onComponentClick","onToolboxClick","search","Search","event","event1","stopPropagation","event2","focus","props6","state4","body","$toolbox","toolbox","dropdown","source","icon"],"version":3,"file":"index.fd1d0717.js.map"}